From b4e0eb5fee088134d454291e629534aa8c350272 Mon Sep 17 00:00:00 2001
From: Michael Campion <michael.campion@emutex.com>
Date: Wed, 20 Nov 2019 13:28:34 +0000
Subject: [PATCH 3/3] i2c: designware-platdrv: Use ACPI method FREQ to get i2c
 speed

The UP Board BIOS provides a method to specify the i2c speed for HAT i2c
ports. This commit adds the mechanisms to retrieve this value from the ACPI
method and apply it to the i2c controller.

Signed-off-by: Michael Campion <michael.campion@emutex.com>
---
 drivers/i2c/busses/i2c-designware-platdrv.c | 36 +++++++++++++++++++++--------
 1 file changed, 26 insertions(+), 10 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index eff3f8a..a2257af 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -46,7 +46,7 @@
 #include "i2c-designware-core.h"
 
 static unsigned int i2c_freq;
-module_param(i2c_freq, uint, 0660);
+module_param(i2c_freq, uint, S_IRUGO);
 MODULE_PARM_DESC(i2c_freq, "I2C clock frequency");
 
 static u32 i2c_dw_get_clk_rate_khz(struct dw_i2c_dev *dev)
@@ -96,6 +96,19 @@ static void dw_i2c_acpi_params(struct platform_device *pdev, char method[],
 	kfree(buf.pointer);
 }
 
+static void dw_i2c_acpi_freq_param(struct platform_device *pdev, u32 *freq)
+{
+	acpi_handle handle = ACPI_HANDLE(&pdev->dev);
+	unsigned long long tmp;
+
+	if (ACPI_FAILURE(acpi_evaluate_integer(handle, "FREQ", NULL, &tmp)))
+		return;
+
+	*freq = (u32)tmp;
+	dev_dbg(&pdev->dev, "%u Hz bus speed specified by 'FREQ' ACPI method\n",
+		*freq);
+}
+
 static int dw_i2c_acpi_configure(struct platform_device *pdev)
 {
 	struct dw_i2c_dev *dev = platform_get_drvdata(pdev);
@@ -311,6 +324,18 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 					 &dev->clk_freq);
 	}
 
+	if (has_acpi_companion(&pdev->dev))
+		dw_i2c_acpi_freq_param(pdev, &dev->clk_freq);
+
+	if (i2c_freq) {
+		dev_warn(&pdev->dev,
+			"I2C Frequency override by module parameter:"
+			"old frequency=%u new frequency=%u\n",
+			dev->clk_freq,
+			i2c_freq);
+		dev->clk_freq = i2c_freq;
+	}
+
 	acpi_speed = i2c_acpi_find_bus_speed(&pdev->dev);
 	/*
 	 * Some DSTDs use a non standard speed, round down to the lowest
@@ -336,15 +361,6 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 	if (has_acpi_companion(&pdev->dev))
 		dw_i2c_acpi_configure(pdev);
 
-	if (i2c_freq) {
-		dev_warn(&pdev->dev,
-			"I2C Frequency override by module parameter:"
-			"old frequency=%u new frequency=%u\n",
-			dev->clk_freq,
-			i2c_freq);
-		dev->clk_freq = i2c_freq;
-	}
-
 	/*
 	 * Only standard mode at 100kHz, fast mode at 400kHz,
 	 * fast mode plus at 1MHz and high speed mode at 3.4MHz are supported.
-- 
2.7.4

